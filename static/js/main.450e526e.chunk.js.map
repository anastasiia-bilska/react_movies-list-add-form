{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","isValid","setIsValid","useState","Math","random","toString","slice","id","touched","setToched","invalidUrl","hasError","htmlFor","classNames","type","placeholder","event","undefined","currentTarget","onBlur","NewMovie","onAdd","count","setCount","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","isValidImgUrl","setIsValidImgUrl","isValidImbdUrl","setIsValidImbdUrl","isUrlValid","url","test","shouldBeSubmitted","trim","onSubmit","preventDefault","newMovie","prevCount","disabled","App","moviesFromServer","setMovies","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.450e526e.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\n// import { event } from 'cypress/types/jquery';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label: string,\n  required?: boolean,\n  onChange: (newValue: string) => void,\n  isValid?: boolean,\n  setIsValid?: (value: boolean) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n  isValid,\n  setIsValid,\n\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setToched] = useState(false);\n  const invalidUrl = isValid === false;\n  const hasError = (touched && required && !value);\n\n  const handleChanges = (event: React.FormEvent<HTMLInputElement>) => {\n    if (setIsValid !== undefined) {\n      setIsValid(true);\n    }\n\n    onChange(event.currentTarget.value);\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError || invalidUrl,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={handleChanges}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {invalidUrl && (\n        <p className=\"help is-danger\">{`${label} is not valid`}</p>\n      )}\n    </div>\n  );\n};\n","import React, { useState, FormEvent } from 'react';\nimport { Movie } from '../../types/Movie';\nimport { TextField } from '../TextField';\n\ninterface Props {\n  onAdd: (newMovie: Movie) => void,\n}\n\nexport const NewMovie:React.FC<Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n  const [isValidImgUrl, setIsValidImgUrl] = useState(true);\n  const [isValidImbdUrl, setIsValidImbdUrl] = useState(true);\n\n  const isUrlValid = (url: string) => {\n    // eslint-disable-next-line max-len\n    const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n    return pattern.test(url);\n  };\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!isUrlValid(imgUrl)) {\n      setIsValidImgUrl(false);\n\n      return;\n    }\n\n    if (!isUrlValid(imdbUrl)) {\n      setIsValidImbdUrl(false);\n\n      return;\n    }\n\n    const newMovie = {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    };\n\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbId('');\n    setImdbUrl('');\n\n    onAdd(newMovie);\n    setCount(prevCount => (prevCount + 1));\n  };\n\n  const shouldBeSubmitted = title.trim()\n    && imdbId.trim()\n    && imdbUrl.trim()\n    && imgUrl.trim();\n\n  return (\n    <form\n      className=\"NewMovie\"\n      onSubmit={handleSubmit}\n      key={count}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={setTitle}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={setDescription}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={setImgUrl}\n        required\n        isValid={isValidImgUrl}\n        setIsValid={setIsValidImgUrl}\n\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={setImdbUrl}\n        required\n        isValid={isValidImbdUrl}\n        setIsValid={setIsValidImbdUrl}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={setImdbId}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!shouldBeSubmitted}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const addMovie = (newMovie: Movie) => {\n    setMovies(prevMovies => (\n      [...prevMovies, newMovie]\n    ));\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}